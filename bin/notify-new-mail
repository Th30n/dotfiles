#!/usr/bin/env python3
import argparse
import email
import email.header
import email.utils
from email.parser import HeaderParser
import os
import shlex
import subprocess

_NOTIFY_FMT = "notify-send -u normal -c mail {title} {body}"


def _notify_send(mail_dir='INBOX', subject=None, from_=None):
    assert isinstance(subject, (str, None))
    if subject is None or not subject.strip():
        subject = '<NO SUBJECT>'
    if from_:
        subject = '{}\n{}'.format(from_, subject)
    title = 'New mail [{}]'.format(mail_dir)
    subprocess.check_output(_NOTIFY_FMT.format(title=shlex.quote(title),
                                               body=shlex.quote(subject)),
                            shell=True)


def _decode_header(header_string):
    '''Decode header contents as defined in RFC 1342'''
    def to_str(str_or_bytes, charset=None):
        if charset:
            assert isinstance(str_or_bytes, bytes)
            return str_or_bytes.decode(encoding=charset)
        if isinstance(str_or_bytes, bytes):
            return str_or_bytes.decode('ascii')
        assert isinstance(str_or_bytes, str)
        return str_or_bytes
    return [email.utils.unquote(to_str(decoded, charset))
            for decoded, charset in email.header.decode_header(header_string)]


parser = argparse.ArgumentParser(description='Check for new mail and send desktop notification')
parser.add_argument('--account', '-a', type=str, required=True, dest='account')
parser.add_argument('--mail-dir', '-m', type=str, dest='mail_dir',
                    default=os.path.join(os.getenv('HOME'), 'Mail'))
args = parser.parse_args()

account_dir = os.path.join(args.mail_dir, args.account)
for mail_dir in os.listdir(account_dir):
    new_dir = os.path.join(account_dir, mail_dir, 'new')
    if not os.path.isdir(new_dir):
        continue
    with os.scandir(new_dir) as mail_it:
        for mail in mail_it:
            atime = int(mail.stat().st_atime)
            mtime = int(mail.stat().st_mtime)
            if atime - mtime >= 60:
                continue
            with open(mail) as mail_contents:
                headers = HeaderParser().parse(mail_contents)
                subject, = _decode_header(headers['subject'])
                from_name, from_addr = email.utils.parseaddr(headers['from'])
                from_ = _decode_header(from_name)[0] if from_name else from_addr
                _notify_send(mail_dir=mail_dir, subject=subject, from_=from_)
